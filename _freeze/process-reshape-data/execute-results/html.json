{
  "hash": "47cc3728c442d2f02921a0387351e3ad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Clean and join data\"\nsubtitle: \"Combining individual- and alternative-level data\"\n---\n\nPopular conjoint survey platforms like Qualtrics and Sawtooth typically provide results in two separate data files: (1) individual participant-level responses and (2) alternative-level combinations of features that each respondent saw. To analyze the results of a conjoint experiment using regression, the two datasets need to be joined.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tinytable)\n```\n:::\n\n\n\n## Individual-level responses\n\nWith individual-level responses, each row represents a survey respondent and each column represents a survey question presented to the respondent. If the survey included general questions about the respondent's demographics, education, income, or any other question, those responses appear here. This data also includes a column for each conjoint task presented to the respondent indicating which of the alternatives was selected.\n\nFor instance, in this example data, researchers collected data on respondent gender and age before asking a series of 12 conjoint tasks. The data thus has columns for `gender` and `age` (respondent-level characteristics), and `CBC_Random{N}` (the choices selected during each conjoint task):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponses <- readRDS(here::here(\"data\", \"processed_data\", \"responses_illustration.rds\"))\nresponses\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 295 × 15\n   resp_id gender   age CBC_Random1 CBC_Random2 CBC_Random3 CBC_Random4\n     <dbl> <chr>  <dbl>       <dbl>       <dbl>       <dbl>       <dbl>\n 1       4 Female    19           1           2           1           1\n 2       5 Female    19           2           1           2           2\n 3       6 Male      20           2           1           1           2\n 4       7 Female    20           2           2           1           2\n 5       8 Female    20           2           2           2           2\n 6       9 Male      20           1           2           1           1\n 7      10 Female    19           2           2           2           1\n 8      11 Male      22           2           1           1           1\n 9      12 Male      20           1           1           2           1\n10      13 Female    19           2           2           2           2\n# ℹ 285 more rows\n# ℹ 8 more variables: CBC_Random5 <dbl>, CBC_Random6 <dbl>, CBC_Random7 <dbl>,\n#   CBC_Random8 <dbl>, CBC_Random9 <dbl>, CBC_Random10 <dbl>,\n#   CBC_Random11 <dbl>, CBC_Random12 <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Possible alternatives\n\nIn this example, the `CBC_Random{N}` columns show which of the two alternatives were selected in each task. However, they do not provide the complete context of the experimental task, like which combinations of levels were displayed with each feature. This information is crucial for conjoint analysis, since we are trying to statistically detect the salience of specific levels and features in relation to others. \n\nAlternative-level data provides this context. In this data, each row represents one of the choices presented to a respondent, with a column for each feature and the alternative shown and a column linking the row to the respondent ID (`version` in this example; the exact name of the column varies across survey platforms). Some survey platforms include a column indicating which choice was selected; this example data does not and instead includes it in `responses`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalternatives <- readRDS(here::here(\"data\", \"processed_data\", \"alternatives_illustration.rds\"))\nalternatives\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,080 × 6\n   version question   alt price packaging         flavor   \n     <dbl>    <dbl> <dbl> <fct> <fct>             <fct>    \n 1       4        1     1 $3    Plastic + sticker Chocolate\n 2       4        1     2 $2    Plastic + paper   Nuts     \n 3       4        2     1 $3    Plastic + sticker Nuts     \n 4       4        2     2 $2    Plastic + paper   Chocolate\n 5       4        3     1 $4    Plastic + paper   Chocolate\n 6       4        3     2 $2    Plastic + sticker Chocolate\n 7       4        4     1 $2    Plastic + sticker Chocolate\n 8       4        4     2 $4    Plastic + paper   Nuts     \n 9       4        5     1 $4    Plastic + sticker Chocolate\n10       4        5     2 $2    Plastic + paper   Nuts     \n# ℹ 7,070 more rows\n```\n\n\n:::\n:::\n\n\nSince there are 2 alternatives presented in each conjoint question, and there are 12 questions or tasks, each respondent has 24 associated rows. With 295 respondents, the `alternatives` data thus contains 295 × 12 × 2, or 7\\,080 rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalternatives |> \n  summarize(\n    versions = n_distinct(version),\n    questions = n_distinct(question),\n    alts = n_distinct(alt),\n    rows = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  versions questions  alts  rows\n     <int>     <int> <int> <int>\n1      295        12     2  7080\n```\n\n\n:::\n:::\n\n\nTo illustrate, this data shows that respondent 4 (a 19-year-old female, as seen in `responses`) saw this question in the first task (`question == 1`):\n\n\n::: {.cell tbl-cap='First conjoint task presented to respondent 4'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_yyio6hxa8ep13tjmb0zr(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_yyio6hxa8ep13tjmb0zr\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_yyio6hxa8ep13tjmb0zr');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_yyio6hxa8ep13tjmb0zr(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_yyio6hxa8ep13tjmb0zr\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 },  ], css_id: 'tinytable_css_u3ma78azw8lkven33zgd',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_ml09bv0ibo1usm0izck9',}, \n          { positions: [ { i: 3, j: 0 },  ], css_id: 'tinytable_css_lgk7v8iddd402kitaxzo',}, \n          { positions: [ { i: 3, j: 1 }, { i: 3, j: 2 },  ], css_id: 'tinytable_css_gut8ezuz2xe7919e6gdv',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_caak1tt5lvln6ntibqfr',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 },  ], css_id: 'tinytable_css_9reofrpy9sgn38e7ji4r',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_yyio6hxa8ep13tjmb0zr(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_u3ma78azw8lkven33zgd, .table th.tinytable_css_u3ma78azw8lkven33zgd { text-align: center; }\n      .table td.tinytable_css_ml09bv0ibo1usm0izck9, .table th.tinytable_css_ml09bv0ibo1usm0izck9 { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_lgk7v8iddd402kitaxzo, .table th.tinytable_css_lgk7v8iddd402kitaxzo { font-weight: bold; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_gut8ezuz2xe7919e6gdv, .table th.tinytable_css_gut8ezuz2xe7919e6gdv { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_caak1tt5lvln6ntibqfr, .table th.tinytable_css_caak1tt5lvln6ntibqfr { font-weight: bold; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_9reofrpy9sgn38e7ji4r, .table th.tinytable_css_9reofrpy9sgn38e7ji4r { font-weight: bold; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_yyio6hxa8ep13tjmb0zr\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">Alternative 1</th>\n                <th scope=\"col\">Alternative 2</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Price    </td>\n                  <td>$3               </td>\n                  <td>$2             </td>\n                </tr>\n                <tr>\n                  <td>Packaging</td>\n                  <td>Plastic + sticker</td>\n                  <td>Plastic + paper</td>\n                </tr>\n                <tr>\n                  <td>Flavor   </td>\n                  <td>Chocolate        </td>\n                  <td>Nuts           </td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n…and she saw this question in the third task (`question == 3`):\n\n\n::: {.cell tbl-cap='Third conjoint task presented to respondent 4'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_t4uq2zztg9xoqp2ahaq8(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_t4uq2zztg9xoqp2ahaq8\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_t4uq2zztg9xoqp2ahaq8');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_t4uq2zztg9xoqp2ahaq8(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_t4uq2zztg9xoqp2ahaq8\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 3, j: 0 },  ], css_id: 'tinytable_css_xeccfa2c900t3y2ppbob',}, \n          { positions: [ { i: 3, j: 1 }, { i: 3, j: 2 },  ], css_id: 'tinytable_css_uptposz8bez3icviykvj',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 },  ], css_id: 'tinytable_css_tzl9q7te379o41f3cvhd',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_ojoqbafv5zvyezgxnnxf',}, \n          { positions: [ { i: 0, j: 1 }, { i: 0, j: 2 },  ], css_id: 'tinytable_css_o1wge861dnbf6urfmad4',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 }, { i: 1, j: 2 }, { i: 2, j: 2 },  ], css_id: 'tinytable_css_0uu4uv3x9nr5ju83wvnj',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_t4uq2zztg9xoqp2ahaq8(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_xeccfa2c900t3y2ppbob, .table th.tinytable_css_xeccfa2c900t3y2ppbob { font-weight: bold; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_uptposz8bez3icviykvj, .table th.tinytable_css_uptposz8bez3icviykvj { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_tzl9q7te379o41f3cvhd, .table th.tinytable_css_tzl9q7te379o41f3cvhd { font-weight: bold; }\n      .table td.tinytable_css_ojoqbafv5zvyezgxnnxf, .table th.tinytable_css_ojoqbafv5zvyezgxnnxf { font-weight: bold; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_o1wge861dnbf6urfmad4, .table th.tinytable_css_o1wge861dnbf6urfmad4 { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_0uu4uv3x9nr5ju83wvnj, .table th.tinytable_css_0uu4uv3x9nr5ju83wvnj { text-align: center; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_t4uq2zztg9xoqp2ahaq8\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">Alternative 1</th>\n                <th scope=\"col\">Alternative 2</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Price    </td>\n                  <td>$4             </td>\n                  <td>$2               </td>\n                </tr>\n                <tr>\n                  <td>Packaging</td>\n                  <td>Plastic + paper</td>\n                  <td>Plastic + sticker</td>\n                </tr>\n                <tr>\n                  <td>Flavor   </td>\n                  <td>Chocolate      </td>\n                  <td>Chocolate        </td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n…and so on for 12 total tasks.\n\nFrom the respondent-level data, we know which alternative she chose: in the first question, she selected the first column (since `responses$CBC_Random1 == 1`)\n\n\n::: {.cell tbl-cap='First conjoint task presented to respondent 4 with selected alternative highlighted'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_kz8wtgppmjkco4vusufn(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_kz8wtgppmjkco4vusufn\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_kz8wtgppmjkco4vusufn');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_kz8wtgppmjkco4vusufn(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_kz8wtgppmjkco4vusufn\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 3, j: 1 },  ], css_id: 'tinytable_css_pqdvaeigw71jqpwsp6e7',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 },  ], css_id: 'tinytable_css_hq61cpxbduo9natatt28',}, \n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_dtv2cqosyii6186szwm3',}, \n          { positions: [ { i: 0, j: 2 },  ], css_id: 'tinytable_css_b23sukva5aba2wzbi5sk',}, \n          { positions: [ { i: 3, j: 2 },  ], css_id: 'tinytable_css_8qlx1cmpr8wnt9679zok',}, \n          { positions: [ { i: 1, j: 2 }, { i: 2, j: 2 },  ], css_id: 'tinytable_css_4lmwdzua2bp5la7cp7ot',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 },  ], css_id: 'tinytable_css_2nvvtqrtptk3updkcmdg',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_1v4y3bc7v6ynmy9qzapb',}, \n          { positions: [ { i: 3, j: 0 },  ], css_id: 'tinytable_css_1gjd2ncxokbg0ibubj03',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_kz8wtgppmjkco4vusufn(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_pqdvaeigw71jqpwsp6e7, .table th.tinytable_css_pqdvaeigw71jqpwsp6e7 { text-align: center; background-color: #fee685; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_hq61cpxbduo9natatt28, .table th.tinytable_css_hq61cpxbduo9natatt28 { text-align: center; background-color: #fee685; }\n      .table td.tinytable_css_dtv2cqosyii6186szwm3, .table th.tinytable_css_dtv2cqosyii6186szwm3 { text-align: center; background-color: #fee685; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_b23sukva5aba2wzbi5sk, .table th.tinytable_css_b23sukva5aba2wzbi5sk { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_8qlx1cmpr8wnt9679zok, .table th.tinytable_css_8qlx1cmpr8wnt9679zok { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_4lmwdzua2bp5la7cp7ot, .table th.tinytable_css_4lmwdzua2bp5la7cp7ot { text-align: center; }\n      .table td.tinytable_css_2nvvtqrtptk3updkcmdg, .table th.tinytable_css_2nvvtqrtptk3updkcmdg { font-weight: bold; }\n      .table td.tinytable_css_1v4y3bc7v6ynmy9qzapb, .table th.tinytable_css_1v4y3bc7v6ynmy9qzapb { font-weight: bold; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_1gjd2ncxokbg0ibubj03, .table th.tinytable_css_1gjd2ncxokbg0ibubj03 { font-weight: bold; border-bottom: solid #d3d8dc 0.1em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_kz8wtgppmjkco4vusufn\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">Alternative 1</th>\n                <th scope=\"col\">Alternative 2</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Price    </td>\n                  <td>$3               </td>\n                  <td>$2             </td>\n                </tr>\n                <tr>\n                  <td>Packaging</td>\n                  <td>Plastic + sticker</td>\n                  <td>Plastic + paper</td>\n                </tr>\n                <tr>\n                  <td>Flavor   </td>\n                  <td>Chocolate        </td>\n                  <td>Nuts           </td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n…and in the third question she also selected the first column (since `responses$CBC_Random3 == 1`).\n\n\n::: {.cell tbl-cap='Third conjoint task presented to respondent 4 with selected alternative highlighted'}\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_wriblfwlkto3ik9s33ff(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_wriblfwlkto3ik9s33ff\");\n          var cell = table.rows[i]?.cells[j];  // Safe navigation to avoid errors\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function insertSpanRow(i, colspan, content) {\n        var table = document.getElementById('tinytable_wriblfwlkto3ik9s33ff');\n        var newRow = table.insertRow(i);\n        var newCell = newRow.insertCell(0);\n        newCell.setAttribute(\"colspan\", colspan);\n        // newCell.innerText = content;\n        // this may be unsafe, but innerText does not interpret <br>\n        newCell.innerHTML = content;\n      }\n      function spanCell_wriblfwlkto3ik9s33ff(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_wriblfwlkto3ik9s33ff\");\n        const targetRow = table.rows[i];\n        const targetCell = targetRow.cells[j];\n        for (let r = 0; r < rowspan; r++) {\n          // Only start deleting cells to the right for the first row (r == 0)\n          if (r === 0) {\n            // Delete cells to the right of the target cell in the first row\n            for (let c = colspan - 1; c > 0; c--) {\n              if (table.rows[i + r].cells[j + c]) {\n                table.rows[i + r].deleteCell(j + c);\n              }\n            }\n          }\n          // For rows below the first, delete starting from the target column\n          if (r > 0) {\n            for (let c = colspan - 1; c >= 0; c--) {\n              if (table.rows[i + r] && table.rows[i + r].cells[j]) {\n                table.rows[i + r].deleteCell(j);\n              }\n            }\n          }\n        }\n        // Set rowspan and colspan of the target cell\n        targetCell.rowSpan = rowspan;\n        targetCell.colSpan = colspan;\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: 0, j: 2 },  ], css_id: 'tinytable_css_wzmqono23jmuv6088f3v',}, \n          { positions: [ { i: 3, j: 0 },  ], css_id: 'tinytable_css_ubmshlxiwjiqh2uhbnf2',}, \n          { positions: [ { i: 3, j: 2 },  ], css_id: 'tinytable_css_sgtuke98gjc3ni117frg',}, \n          { positions: [ { i: 0, j: 1 },  ], css_id: 'tinytable_css_lo44moq9jgepa04ce4cx',}, \n          { positions: [ { i: 1, j: 0 }, { i: 2, j: 0 },  ], css_id: 'tinytable_css_l7a60dmslj09jcx8yi53',}, \n          { positions: [ { i: 3, j: 1 },  ], css_id: 'tinytable_css_kv792s35vywrwvix05w0',}, \n          { positions: [ { i: 0, j: 0 },  ], css_id: 'tinytable_css_iw2c4n4aekb9se2qs006',}, \n          { positions: [ { i: 1, j: 2 }, { i: 2, j: 2 },  ], css_id: 'tinytable_css_8v6qckxmcnlkvpci7wz2',}, \n          { positions: [ { i: 1, j: 1 }, { i: 2, j: 1 },  ], css_id: 'tinytable_css_6cgthwh9cwec5nn7rzxe',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_wriblfwlkto3ik9s33ff(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_wzmqono23jmuv6088f3v, .table th.tinytable_css_wzmqono23jmuv6088f3v { text-align: center; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_ubmshlxiwjiqh2uhbnf2, .table th.tinytable_css_ubmshlxiwjiqh2uhbnf2 { font-weight: bold; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_sgtuke98gjc3ni117frg, .table th.tinytable_css_sgtuke98gjc3ni117frg { text-align: center; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_lo44moq9jgepa04ce4cx, .table th.tinytable_css_lo44moq9jgepa04ce4cx { text-align: center; background-color: #fee685; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_l7a60dmslj09jcx8yi53, .table th.tinytable_css_l7a60dmslj09jcx8yi53 { font-weight: bold; }\n      .table td.tinytable_css_kv792s35vywrwvix05w0, .table th.tinytable_css_kv792s35vywrwvix05w0 { text-align: center; background-color: #fee685; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_iw2c4n4aekb9se2qs006, .table th.tinytable_css_iw2c4n4aekb9se2qs006 { font-weight: bold; border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_8v6qckxmcnlkvpci7wz2, .table th.tinytable_css_8v6qckxmcnlkvpci7wz2 { text-align: center; }\n      .table td.tinytable_css_6cgthwh9cwec5nn7rzxe, .table th.tinytable_css_6cgthwh9cwec5nn7rzxe { text-align: center; background-color: #fee685; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_wriblfwlkto3ik9s33ff\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\"> </th>\n                <th scope=\"col\">Alternative 1</th>\n                <th scope=\"col\">Alternative 2</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td>Price    </td>\n                  <td>$4             </td>\n                  <td>$2               </td>\n                </tr>\n                <tr>\n                  <td>Packaging</td>\n                  <td>Plastic + paper</td>\n                  <td>Plastic + sticker</td>\n                </tr>\n                <tr>\n                  <td>Flavor   </td>\n                  <td>Chocolate      </td>\n                  <td>Chocolate        </td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n## Pivoting, expanding, and combining\n\nIn order to analyze this data with regression, we need to combine it into one long dataset, with a row for each respondent-choice.\n\nFirst, we take the wide `responses` data and pivot it longer so that there is a row per question per respondent (or 295 × 12, or 3\\,540 rows):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponses_long <- responses |> \n  pivot_longer(\n    cols = starts_with(\"CBC_Random\"),\n    names_to = \"question_raw\",\n    values_to = \"chosen_alt\"\n  ) |> \n  # The task number is embedded in text, like \"CBC_Random6\"; this extracts it\n  mutate(question = as.numeric(str_extract(question_raw, \"\\\\d+\"))) |> \n  select(-question_raw)\nresponses_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3,540 × 5\n   resp_id gender   age chosen_alt question\n     <dbl> <chr>  <dbl>      <dbl>    <dbl>\n 1       4 Female    19          1        1\n 2       4 Female    19          2        2\n 3       4 Female    19          1        3\n 4       4 Female    19          1        4\n 5       4 Female    19          1        5\n 6       4 Female    19          1        6\n 7       4 Female    19          2        7\n 8       4 Female    19          1        8\n 9       4 Female    19          1        9\n10       4 Female    19          1       10\n# ℹ 3,530 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponses_long |> \n  summarize(\n    resp_ids = n_distinct(resp_id),\n    questions = n_distinct(question)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  resp_ids questions\n     <int>     <int>\n1      295        12\n```\n\n\n:::\n:::\n\n\nNext, we expand the long data so that there are rows for each of the two choices within each question, resulting in 295 × 12 × 2, or 7\\,080 rows, matching the `alternatives` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponses_long_expanded <- responses_long |>\n  expand(resp_id, question, alt = 1:2) |> \n  left_join(responses_long, by = join_by(resp_id, question))\nresponses_long_expanded\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,080 × 6\n   resp_id question   alt gender   age chosen_alt\n     <dbl>    <dbl> <int> <chr>  <dbl>      <dbl>\n 1       4        1     1 Female    19          1\n 2       4        1     2 Female    19          1\n 3       4        2     1 Female    19          2\n 4       4        2     2 Female    19          2\n 5       4        3     1 Female    19          1\n 6       4        3     2 Female    19          1\n 7       4        4     1 Female    19          1\n 8       4        4     2 Female    19          1\n 9       4        5     1 Female    19          1\n10       4        5     2 Female    19          1\n# ℹ 7,070 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresponses_long_expanded |> \n  summarize(\n    resp_ids = n_distinct(resp_id),\n    questions = n_distinct(question),\n    alts = n_distinct(alt),\n    rows = n()\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  resp_ids questions  alts  rows\n     <int>     <int> <int> <int>\n1      295        12     2  7080\n```\n\n\n:::\n:::\n\n\nFinally, we join the alternative-level data to the long respondent-level data. We now have respondent-level characteristics *and* alternative-level characteristics in the same long data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- responses_long_expanded |> \n  left_join(alternatives, by = join_by(resp_id == version, question, alt)) |> \n  mutate(choice = as.numeric(alt == chosen_alt))\ncombined\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,080 × 10\n   resp_id question   alt gender   age chosen_alt price packaging  flavor choice\n     <dbl>    <dbl> <dbl> <chr>  <dbl>      <dbl> <fct> <fct>      <fct>   <dbl>\n 1       4        1     1 Female    19          1 $3    Plastic +… Choco…      1\n 2       4        1     2 Female    19          1 $2    Plastic +… Nuts        0\n 3       4        2     1 Female    19          2 $3    Plastic +… Nuts        0\n 4       4        2     2 Female    19          2 $2    Plastic +… Choco…      1\n 5       4        3     1 Female    19          1 $4    Plastic +… Choco…      1\n 6       4        3     2 Female    19          1 $2    Plastic +… Choco…      0\n 7       4        4     1 Female    19          1 $2    Plastic +… Choco…      1\n 8       4        4     2 Female    19          1 $4    Plastic +… Nuts        0\n 9       4        5     1 Female    19          1 $4    Plastic +… Choco…      1\n10       4        5     2 Female    19          1 $2    Plastic +… Nuts        0\n# ℹ 7,070 more rows\n```\n\n\n:::\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}