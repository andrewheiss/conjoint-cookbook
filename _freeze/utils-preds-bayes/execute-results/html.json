{
  "hash": "65d619e4e4b7fcf2261b194b9d5596f3",
  "result": {
    "engine": "knitr",
    "markdown": "# Utilities and predictions with Bayesian multinomial regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(brms)\nlibrary(rstan)\nlibrary(tidybayes)\nlibrary(ggdist)\nlibrary(marginaleffects)\nlibrary(parameters)\nlibrary(tinytable)\nlibrary(scales)\nlibrary(ggforce)\n\nstickers <- readRDS(\"data/processed_data/study_5_sticker.rds\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstickers_choice_alt <- stickers |>\n  mutate(choice_alt = factor(alt * choice))\n\nstickers_choice_alt |>\n  select(resp_id, question, price, packaging, flavor, choice, choice_alt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,080 × 7\n   resp_id question price packaging         flavor    choice choice_alt\n     <dbl>    <dbl> <fct> <fct>             <fct>      <dbl> <fct>     \n 1       4        1 $3    Plastic + sticker Chocolate      1 1         \n 2       4        1 $2    Plastic + paper   Nuts           0 0         \n 3       4        2 $3    Plastic + sticker Nuts           0 0         \n 4       4        2 $2    Plastic + paper   Chocolate      1 2         \n 5       4        3 $4    Plastic + paper   Chocolate      1 1         \n 6       4        3 $2    Plastic + sticker Chocolate      0 0         \n 7       4        4 $2    Plastic + sticker Chocolate      1 1         \n 8       4        4 $4    Plastic + paper   Nuts           0 0         \n 9       4        5 $4    Plastic + sticker Chocolate      1 1         \n10       4        5 $2    Plastic + paper   Nuts           0 0         \n# ℹ 7,070 more rows\n```\n\n\n:::\n:::\n\n\n## Model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_stickers_mega_mlm_brms <- brm(\n  bf(choice_alt ~\n    # Choice-level predictors that are nested within respondents...\n    (price + packaging + flavor) +\n    # ... with random respondent-specific slopes for the\n    # nested choice-level predictors\n    (1 + price + packaging + flavor | ID | resp_id)),\n  data = stickers_choice_alt,\n  family = categorical(refcat = \"0\"),\n  prior = c(\n    prior(normal(0, 3), class = b, dpar = mu1),\n    prior(normal(0, 3), class = b, dpar = mu2),\n    prior(exponential(1), class = sd, dpar = mu1),\n    prior(exponential(1), class = sd, dpar = mu2),\n    prior(lkj(1), class = cor)\n  ),\n  chains = 4, cores = 4, warmup = 1000, iter = 5000, seed = 1234,\n  backend = \"cmdstanr\", threads = threading(2), # refresh = 0,\n  control = list(adapt_delta = 0.9),\n  file = \"models/model_stickers_mega_mlm_brms\"\n)\n```\n:::\n\n\n\n## Part-worth utilities and ratios\n\n### Model βs\n\nThe coefficients from the model \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstickers_cat_marginalized <- model_stickers_mega_mlm_brms %>% \n  gather_draws(`b_.*`, regex = TRUE) %>% \n  # Each variable name has \"mu1\", \"mu2\", etc. built in, like \"b_mu1_flavorNuts\". This\n  # splits the .variable column into two parts based on a regular expression,\n  # creating one column for the mu part (\"b_mu1_\") and one for the rest of the\n  # variable name (\"flavorNuts\")\n  separate_wider_regex(\n    .variable,\n    patterns = c(mu = \"b_mu\\\\d_\", .variable = \".*\")\n  ) %>% \n  # Find the average of the two mu estimates for each variable within each\n  # draw, or marginalize across the two options, since they're randomized\n  group_by(.variable, .draw, .chain, .iteration) %>% \n  summarize(.value = mean(.value)) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by '.variable', '.draw', '.chain'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nstickers_cat_marginalized |> \n  filter(.variable != \"Intercept\") |> \n  ggplot(aes(x = .value, y = .variable)) +\n  stat_halfeye() +\n  geom_vline(xintercept = 0)\n```\n\n::: {.cell-output-display}\n![](utils-preds-bayes_files/figure-html/unnamed-chunk-2-1.png){width=90%}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstickers_cat_marginalized |> \n  group_by(.variable) |> \n  median_hdi(.value)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 7\n  .variable                .value .lower .upper .width .point .interval\n  <chr>                     <dbl>  <dbl>  <dbl>  <dbl> <chr>  <chr>    \n1 flavorNuts               -2.56  -2.87  -2.26    0.95 median hdi      \n2 Intercept                 1.25   1.01   1.49    0.95 median hdi      \n3 packagingPlasticPsticker  0.741  0.504  0.976   0.95 median hdi      \n4 price$3                  -1.05  -1.23  -0.887   0.95 median hdi      \n5 price$4                  -2.26  -2.49  -2.03    0.95 median hdi      \n```\n\n\n:::\n:::\n\n\n### Individual part-worths\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_effects <- stickers_cat_marginalized |> \n  rename(value_population = .value)\n\npopulation_effects\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 80,000 × 5\n# Groups:   .variable, .draw, .chain [80,000]\n   .variable .draw .chain .iteration value_population\n   <chr>     <int>  <int>      <int>            <dbl>\n 1 Intercept     1      1          1             1.13\n 2 Intercept     2      1          2             1.47\n 3 Intercept     3      1          3             1.47\n 4 Intercept     4      1          4             1.40\n 5 Intercept     5      1          5             1.33\n 6 Intercept     6      1          6             1.35\n 7 Intercept     7      1          7             1.33\n 8 Intercept     8      1          8             1.18\n 9 Intercept     9      1          9             1.22\n10 Intercept    10      1         10             1.17\n# ℹ 79,990 more rows\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nindividual_effects <- model_stickers_mega_mlm_brms |>\n  gather_draws(`r_.*`[resp_id,term], regex = TRUE) |> \n  separate_wider_regex(\n    .variable,\n    patterns = c(mu = \"r_resp_id__mu\", .variable = \"\\\\d\")\n  ) |> \n  group_by(resp_id, term, .chain, .iteration, .draw) |> \n  summarize(.value = mean(.value)) \n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- individual_effects |> \n  rename(.variable = term, value_individual = .value) |> \n  left_join(population_effects, by = join_by(.variable, .chain, .iteration, .draw)) |> \n  ungroup() |> \n  filter(.variable != \"Intercept\") |> \n  mutate(utility = value_individual + value_population)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_worths_posterior <- combined |> \n  group_by(resp_id, .variable) |> \n  mean_hdi(utility) |> \n  select(resp_id, .variable, utility) |> \n  bind_rows(expand_grid(\n    utility = 0, \n    .variable = c(\"flavorChocolate\", \"packagingPackagingPpaper\", \"price$2\"), \n    resp_id = unique(combined$resp_id)\n  )) |> \n  mutate(feature = case_when(\n    str_starts(.variable, \"price\") ~ \"Price\",\n    str_starts(.variable, \"packaging\") ~ \"Packaging\",\n    str_starts(.variable, \"flavor\") ~ \"Flavor\"\n  )) |> \n  mutate(.variable = str_remove_all(.variable, \"^price|^packaging|^flavor\"))\n```\n:::\n\n\nIndividual utilty part-worths:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_worths_posterior |> \n  pivot_wider(names_from = c(feature, .variable), values_from = utility) |> \n  slice(1:5) |> \n  select(\n    ID = resp_id, `$2` = `Price_$2`, `$3` = `Price_$3`, `$4` = `Price_$4`,\n    Paper = Packaging_PackagingPpaper, Sticker = Packaging_PlasticPsticker,\n    Chocolate = Flavor_Chocolate, Nuts = Flavor_Nuts\n  ) |> \n  tt() |> \n  format_tt(j = 2:8, digits = 2, num_zero = TRUE, num_fmt = \"significant\") |> \n  group_tt(\n    j = list(\n      \"Price\" = 2:4,\n      \"Packaging\" = 5:6,\n      \"Flavor\" = 7:8\n    )\n  ) |> \n  style_tt(\n    i = 1:5,\n    j = c(2, 5, 7), line = \"l\"\n  ) |> \n  style_tt(\n    i = 1, background = \"yellow\"\n  )\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_hxjwpj50f82svyqbt915(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_hxjwpj50f82svyqbt915\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_hxjwpj50f82svyqbt915(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_hxjwpj50f82svyqbt915\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '5', j: 4 }, { i: '5', j: 1 }, { i: '5', j: 6 },  ], css_id: 'tinytable_css_s2tbuskpw1jifsarln8t',}, \n          { positions: [ { i: '4', j: 1 }, { i: '3', j: 4 }, { i: '3', j: 1 }, { i: '2', j: 4 }, { i: '2', j: 6 }, { i: '3', j: 6 }, { i: '4', j: 6 }, { i: '2', j: 1 }, { i: '4', j: 4 },  ], css_id: 'tinytable_css_f9ehjc5ax2sdcnojamef',}, \n          { positions: [ { i: '1', j: 4 }, { i: '1', j: 1 }, { i: '1', j: 6 },  ], css_id: 'tinytable_css_5u7o7jyglnpilh2zpi7k',}, \n          { positions: [ { i: '-1', j: 2 }, { i: '-1', j: 3 }, { i: '-1', j: 1 },  ], css_id: 'tinytable_css_uo7oxe9no0y4wv0h4vu9',}, \n          { positions: [ { i: '5', j: 0 }, { i: '5', j: 5 }, { i: '5', j: 3 }, { i: '5', j: 2 }, { i: '5', j: 7 },  ], css_id: 'tinytable_css_dt0lkvx0rui4n6ldmhex',}, \n          { positions: [ { i: '1', j: 0 }, { i: '1', j: 2 }, { i: '1', j: 7 }, { i: '1', j: 5 }, { i: '1', j: 3 },  ], css_id: 'tinytable_css_xrqwc79ds04jatexwbhg',}, \n          { positions: [ { i: '-1', j: 4 }, { i: '-1', j: 0 }, { i: '-1', j: 5 }, { i: '-1', j: 7 }, { i: '-1', j: 6 },  ], css_id: 'tinytable_css_y4q9wtpjmuw3fdmp7h63',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 5 }, { i: '0', j: 3 }, { i: '0', j: 2 }, { i: '0', j: 1 }, { i: '0', j: 6 }, { i: '0', j: 4 }, { i: '0', j: 7 },  ], css_id: 'tinytable_css_3cy767jrx2sds7nt85q8',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_hxjwpj50f82svyqbt915(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_s2tbuskpw1jifsarln8t, .table th.tinytable_css_s2tbuskpw1jifsarln8t { border-left: solid black 0.1em; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_f9ehjc5ax2sdcnojamef, .table th.tinytable_css_f9ehjc5ax2sdcnojamef { border-left: solid black 0.1em; }\n      .table td.tinytable_css_5u7o7jyglnpilh2zpi7k, .table th.tinytable_css_5u7o7jyglnpilh2zpi7k { border-left: solid black 0.1em; background-color: #FFFF00; }\n      .table td.tinytable_css_uo7oxe9no0y4wv0h4vu9, .table th.tinytable_css_uo7oxe9no0y4wv0h4vu9 { border-top: solid #d3d8dc 0.1em; text-align: center; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_dt0lkvx0rui4n6ldmhex, .table th.tinytable_css_dt0lkvx0rui4n6ldmhex { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_xrqwc79ds04jatexwbhg, .table th.tinytable_css_xrqwc79ds04jatexwbhg { background-color: #FFFF00; }\n      .table td.tinytable_css_y4q9wtpjmuw3fdmp7h63, .table th.tinytable_css_y4q9wtpjmuw3fdmp7h63 { border-top: solid #d3d8dc 0.1em; text-align: center; }\n      .table td.tinytable_css_3cy767jrx2sds7nt85q8, .table th.tinytable_css_3cy767jrx2sds7nt85q8 { border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_hxjwpj50f82svyqbt915\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n<tr>\n<th scope=\"col\" align=\"center\" colspan=1 data-row=\"-1\" data-col=\"0\"> </th>\n<th scope=\"col\" align=\"center\" colspan=3 data-row=\"-1\" data-col=\"1\">Price</th>\n<th scope=\"col\" align=\"center\" colspan=2 data-row=\"-1\" data-col=\"2\">Packaging</th>\n<th scope=\"col\" align=\"center\" colspan=2 data-row=\"-1\" data-col=\"3\">Flavor</th>\n</tr>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">ID</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">$2</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">$3</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">$4</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">Paper</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"5\">Sticker</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"6\">Chocolate</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"7\">Nuts</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">4</td>\n                  <td data-row=\"1\" data-col=\"1\">0</td>\n                  <td data-row=\"1\" data-col=\"2\">-0.82</td>\n                  <td data-row=\"1\" data-col=\"3\">-1.6</td>\n                  <td data-row=\"1\" data-col=\"4\">0</td>\n                  <td data-row=\"1\" data-col=\"5\">-1.66</td>\n                  <td data-row=\"1\" data-col=\"6\">0</td>\n                  <td data-row=\"1\" data-col=\"7\">-4.109</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">5</td>\n                  <td data-row=\"2\" data-col=\"1\">0</td>\n                  <td data-row=\"2\" data-col=\"2\">-1.42</td>\n                  <td data-row=\"2\" data-col=\"3\">-3.3</td>\n                  <td data-row=\"2\" data-col=\"4\">0</td>\n                  <td data-row=\"2\" data-col=\"5\">0.27</td>\n                  <td data-row=\"2\" data-col=\"6\">0</td>\n                  <td data-row=\"2\" data-col=\"7\">-0.074</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">6</td>\n                  <td data-row=\"3\" data-col=\"1\">0</td>\n                  <td data-row=\"3\" data-col=\"2\">-0.90</td>\n                  <td data-row=\"3\" data-col=\"3\">-1.9</td>\n                  <td data-row=\"3\" data-col=\"4\">0</td>\n                  <td data-row=\"3\" data-col=\"5\">1.18</td>\n                  <td data-row=\"3\" data-col=\"6\">0</td>\n                  <td data-row=\"3\" data-col=\"7\">-3.275</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">7</td>\n                  <td data-row=\"4\" data-col=\"1\">0</td>\n                  <td data-row=\"4\" data-col=\"2\">-1.00</td>\n                  <td data-row=\"4\" data-col=\"3\">-1.6</td>\n                  <td data-row=\"4\" data-col=\"4\">0</td>\n                  <td data-row=\"4\" data-col=\"5\">1.20</td>\n                  <td data-row=\"4\" data-col=\"6\">0</td>\n                  <td data-row=\"4\" data-col=\"7\">-3.641</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">8</td>\n                  <td data-row=\"5\" data-col=\"1\">0</td>\n                  <td data-row=\"5\" data-col=\"2\">-0.84</td>\n                  <td data-row=\"5\" data-col=\"3\">-1.6</td>\n                  <td data-row=\"5\" data-col=\"4\">0</td>\n                  <td data-row=\"5\" data-col=\"5\">2.36</td>\n                  <td data-row=\"5\" data-col=\"6\">0</td>\n                  <td data-row=\"5\" data-col=\"7\">-3.557</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nFor respondent 4, the difference in preference when moving from \\$2 to \\$4 is roughly the same as the preference for a sticker\n\nWe can also calculate the relative importance of each attribute for each individual by determining how much each attribute contributes to the overall utility of the choice. We first calculate the range of each \n\n\n::: {.cell}\n\n```{.r .cell-code}\npart_worths_posterior |> \n  filter(resp_id == 4) |> \n  arrange(.variable) |> \n  group_by(resp_id, feature) |> \n  summarize(\n    range_text = glue::glue(\"{round(max(utility), 2)} − {round(min(utility), 2)}\"),\n    range = diff(range(utility))) |> \n  mutate(pct_importance = range / sum(range)) |> \n  ungroup() |> \n  arrange(desc(feature)) |> \n  janitor::adorn_totals() |> \n  tt() |> \n  format_tt(digits = 3, num_zero = TRUE, num_fmt = \"significant\") |> \n  format_tt(j = 5, fn = scales::label_percent(accuracy = 0.1))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'resp_id'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_s1kooseip9y25ew1eaw7(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_s1kooseip9y25ew1eaw7\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_s1kooseip9y25ew1eaw7(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_s1kooseip9y25ew1eaw7\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '4', j: 0 }, { i: '4', j: 1 }, { i: '4', j: 2 }, { i: '4', j: 3 }, { i: '4', j: 4 },  ], css_id: 'tinytable_css_cbs0pgms035vv8ukla6c',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 1 }, { i: '0', j: 2 }, { i: '0', j: 3 }, { i: '0', j: 4 },  ], css_id: 'tinytable_css_el4ysj9ptr01s1jq7yf4',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_s1kooseip9y25ew1eaw7(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_cbs0pgms035vv8ukla6c, .table th.tinytable_css_cbs0pgms035vv8ukla6c { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_el4ysj9ptr01s1jq7yf4, .table th.tinytable_css_el4ysj9ptr01s1jq7yf4 { border-top: solid #d3d8dc 0.1em; border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_s1kooseip9y25ew1eaw7\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">resp_id</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">feature</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">range_text</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">range</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">pct_importance</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">4</td>\n                  <td data-row=\"1\" data-col=\"1\">Price</td>\n                  <td data-row=\"1\" data-col=\"2\">0 − -1.61</td>\n                  <td data-row=\"1\" data-col=\"3\">1.61</td>\n                  <td data-row=\"1\" data-col=\"4\">21.8%</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">4</td>\n                  <td data-row=\"2\" data-col=\"1\">Packaging</td>\n                  <td data-row=\"2\" data-col=\"2\">0 − -1.66</td>\n                  <td data-row=\"2\" data-col=\"3\">1.66</td>\n                  <td data-row=\"2\" data-col=\"4\">22.5%</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">4</td>\n                  <td data-row=\"3\" data-col=\"1\">Flavor</td>\n                  <td data-row=\"3\" data-col=\"2\">0 − -4.11</td>\n                  <td data-row=\"3\" data-col=\"3\">4.11</td>\n                  <td data-row=\"3\" data-col=\"4\">55.7%</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">Total</td>\n                  <td data-row=\"4\" data-col=\"1\">-</td>\n                  <td data-row=\"4\" data-col=\"2\">-</td>\n                  <td data-row=\"4\" data-col=\"3\">7.37</td>\n                  <td data-row=\"4\" data-col=\"4\">100.0%</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npref_ranges_posterior <- combined |> \n  mutate(feature = case_when(\n    str_starts(.variable, \"price\") ~ \"Price\",\n    str_starts(.variable, \"packaging\") ~ \"Packaging\",\n    str_starts(.variable, \"flavor\") ~ \"Flavor\"\n  )) |> \n  mutate(.variable = str_remove_all(.variable, \"^price|^packaging|^flavor\")) |> \n  group_by(resp_id, feature, .draw) |> \n  summarize(range = diff(range(c(0, utility)))) |> \n  group_by(resp_id, .draw) |> \n  mutate(pct_importance = range / sum(range))\n```\n:::\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nasdf <- pref_ranges_posterior |> \n  group_by(resp_id, feature) |> \n  summarize(\n    range = mean(range),\n    relative_importance = mean(pct_importance)\n  ) |> \n  filter(resp_id %in% 4:8) |> \n  pivot_wider(names_from = feature, values_from = c(range, relative_importance))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'resp_id'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\nasdf |> \n  setNames(c(\"ID\", \"Flavor\", \"Packaging\", \"Price\", \"Flavor\", \"Packaging\", \"Price\")) |> \n  tt() |> \n  format_tt(j = 2:4, digits = 2, num_zero = TRUE, num_fmt = \"significant\") |> \n  group_tt(\n    j = list(\n      \"Range\" = 2:4,\n      \"Importance\" = 5:7\n    )\n  ) |> \n  style_tt(\n    i = 1:5,\n    j = c(2, 5), line = \"l\"\n  ) |> \n  format_tt(j = 5:7, fn = scales::label_percent(accuracy = 0.1))\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<!-- preamble start -->\n\n    <script>\n\n      function styleCell_px2czgkdbcw6ag1fu9lf(i, j, css_id) {\n          var table = document.getElementById(\"tinytable_px2czgkdbcw6ag1fu9lf\");\n          var cell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n          if (cell) {\n              console.log(`Styling cell at (${i}, ${j}) with class ${css_id}`);\n              cell.classList.add(css_id);\n          } else {\n              console.warn(`Cell at (${i}, ${j}) not found.`);\n          }\n      }\n      function spanCell_px2czgkdbcw6ag1fu9lf(i, j, rowspan, colspan) {\n        var table = document.getElementById(\"tinytable_px2czgkdbcw6ag1fu9lf\");\n        const targetCell = table.querySelector(`[data-row=\"${i}\"][data-col=\"${j}\"]`);\n        if (!targetCell) {\n          console.warn(`Cell at (${i}, ${j}) not found.`);\n        }\n\n        // Get all cells that need to be removed\n        const cellsToRemove = [];\n        for (let r = 0; r < rowspan; r++) {\n          for (let c = 0; c < colspan; c++) {\n            if (r === 0 && c === 0) continue; // Skip the target cell\n            const cell = table.querySelector(`[data-row=\"${i + r}\"][data-col=\"${j + c}\"]`);\n            if (cell) {\n              cellsToRemove.push(cell);\n            }\n          }\n        }\n\n        // Remove all cells\n        cellsToRemove.forEach(cell => cell.remove());\n\n        // Set rowspan and colspan of the target cell if it exists\n        if (targetCell) {\n          targetCell.rowSpan = rowspan;\n          targetCell.colSpan = colspan;\n        }\n      }\n      // tinytable span after\n      window.addEventListener('load', function () {\n          var cellsToStyle = [\n            // tinytable style arrays after\n          { positions: [ { i: '5', j: 1 }, { i: '5', j: 4 },  ], css_id: 'tinytable_css_csrxiwatj7v1ck0a87l4',}, \n          { positions: [ { i: '1', j: 1 }, { i: '2', j: 1 }, { i: '4', j: 4 }, { i: '1', j: 4 }, { i: '3', j: 1 }, { i: '4', j: 1 }, { i: '2', j: 4 }, { i: '3', j: 4 },  ], css_id: 'tinytable_css_j8old6t9rnleiq2n6sb9',}, \n          { positions: [ { i: '-1', j: 2 }, { i: '-1', j: 1 },  ], css_id: 'tinytable_css_9sj30r0ncgmhvbemao2c',}, \n          { positions: [ { i: '5', j: 2 }, { i: '5', j: 5 }, { i: '5', j: 0 }, { i: '5', j: 3 }, { i: '5', j: 6 },  ], css_id: 'tinytable_css_nib21gzh8j0i8i9o8kap',}, \n          { positions: [ { i: '-1', j: 0 }, { i: '-1', j: 5 }, { i: '-1', j: 4 }, { i: '-1', j: 3 }, { i: '-1', j: 6 },  ], css_id: 'tinytable_css_vw5uo3w5fzspl81x1wgn',}, \n          { positions: [ { i: '0', j: 0 }, { i: '0', j: 3 }, { i: '0', j: 2 }, { i: '0', j: 1 }, { i: '0', j: 4 }, { i: '0', j: 6 }, { i: '0', j: 5 },  ], css_id: 'tinytable_css_3riu9lg93uufvjy31mow',}, \n          ];\n\n          // Loop over the arrays to style the cells\n          cellsToStyle.forEach(function (group) {\n              group.positions.forEach(function (cell) {\n                  styleCell_px2czgkdbcw6ag1fu9lf(cell.i, cell.j, group.css_id);\n              });\n          });\n      });\n    </script>\n\n    <style>\n      /* tinytable css entries after */\n      .table td.tinytable_css_csrxiwatj7v1ck0a87l4, .table th.tinytable_css_csrxiwatj7v1ck0a87l4 { border-left: solid black 0.1em; border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_j8old6t9rnleiq2n6sb9, .table th.tinytable_css_j8old6t9rnleiq2n6sb9 { border-left: solid black 0.1em; }\n      .table td.tinytable_css_9sj30r0ncgmhvbemao2c, .table th.tinytable_css_9sj30r0ncgmhvbemao2c { border-top: solid #d3d8dc 0.1em; text-align: center; border-bottom: solid #d3d8dc 0.05em; }\n      .table td.tinytable_css_nib21gzh8j0i8i9o8kap, .table th.tinytable_css_nib21gzh8j0i8i9o8kap { border-bottom: solid #d3d8dc 0.1em; }\n      .table td.tinytable_css_vw5uo3w5fzspl81x1wgn, .table th.tinytable_css_vw5uo3w5fzspl81x1wgn { border-top: solid #d3d8dc 0.1em; text-align: center; }\n      .table td.tinytable_css_3riu9lg93uufvjy31mow, .table th.tinytable_css_3riu9lg93uufvjy31mow { border-bottom: solid #d3d8dc 0.05em; }\n    </style>\n    <div class=\"container\">\n      <table class=\"table table-borderless\" id=\"tinytable_px2czgkdbcw6ag1fu9lf\" style=\"width: auto; margin-left: auto; margin-right: auto;\" data-quarto-disable-processing='true'>\n        <thead>\n<tr>\n<th scope=\"col\" align=\"center\" colspan=1 data-row=\"-1\" data-col=\"0\"> </th>\n<th scope=\"col\" align=\"center\" colspan=3 data-row=\"-1\" data-col=\"1\">Range</th>\n<th scope=\"col\" align=\"center\" colspan=3 data-row=\"-1\" data-col=\"2\">Importance</th>\n</tr>\n        \n              <tr>\n                <th scope=\"col\" data-row=\"0\" data-col=\"0\">ID</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"1\">Flavor</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"2\">Packaging</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"3\">Price</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"4\">Flavor</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"5\">Packaging</th>\n                <th scope=\"col\" data-row=\"0\" data-col=\"6\">Price</th>\n              </tr>\n        </thead>\n        \n        <tbody>\n                <tr>\n                  <td data-row=\"1\" data-col=\"0\">4</td>\n                  <td data-row=\"1\" data-col=\"1\">4.11</td>\n                  <td data-row=\"1\" data-col=\"2\">1.70</td>\n                  <td data-row=\"1\" data-col=\"3\">1.7</td>\n                  <td data-row=\"1\" data-col=\"4\">55.7%</td>\n                  <td data-row=\"1\" data-col=\"5\">21.6%</td>\n                  <td data-row=\"1\" data-col=\"6\">22.7%</td>\n                </tr>\n                <tr>\n                  <td data-row=\"2\" data-col=\"0\">5</td>\n                  <td data-row=\"2\" data-col=\"1\">0.74</td>\n                  <td data-row=\"2\" data-col=\"2\">0.71</td>\n                  <td data-row=\"2\" data-col=\"3\">3.3</td>\n                  <td data-row=\"2\" data-col=\"4\">15.0%</td>\n                  <td data-row=\"2\" data-col=\"5\">14.4%</td>\n                  <td data-row=\"2\" data-col=\"6\">70.6%</td>\n                </tr>\n                <tr>\n                  <td data-row=\"3\" data-col=\"0\">6</td>\n                  <td data-row=\"3\" data-col=\"1\">3.28</td>\n                  <td data-row=\"3\" data-col=\"2\">1.28</td>\n                  <td data-row=\"3\" data-col=\"3\">2.0</td>\n                  <td data-row=\"3\" data-col=\"4\">50.4%</td>\n                  <td data-row=\"3\" data-col=\"5\">18.9%</td>\n                  <td data-row=\"3\" data-col=\"6\">30.7%</td>\n                </tr>\n                <tr>\n                  <td data-row=\"4\" data-col=\"0\">7</td>\n                  <td data-row=\"4\" data-col=\"1\">3.64</td>\n                  <td data-row=\"4\" data-col=\"2\">1.28</td>\n                  <td data-row=\"4\" data-col=\"3\">1.7</td>\n                  <td data-row=\"4\" data-col=\"4\">55.3%</td>\n                  <td data-row=\"4\" data-col=\"5\">18.8%</td>\n                  <td data-row=\"4\" data-col=\"6\">26.0%</td>\n                </tr>\n                <tr>\n                  <td data-row=\"5\" data-col=\"0\">8</td>\n                  <td data-row=\"5\" data-col=\"1\">3.56</td>\n                  <td data-row=\"5\" data-col=\"2\">2.36</td>\n                  <td data-row=\"5\" data-col=\"3\">1.6</td>\n                  <td data-row=\"5\" data-col=\"4\">47.0%</td>\n                  <td data-row=\"5\" data-col=\"5\">30.7%</td>\n                  <td data-row=\"5\" data-col=\"6\">22.3%</td>\n                </tr>\n        </tbody>\n      </table>\n    </div>\n<!-- hack to avoid NA insertion in last line -->\n```\n\n:::\n:::\n\n\nFinally, we can aggregate these individual importance ratios into overall averages:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npref_ranges_posterior |> \n  group_by(feature, .draw) |> \n  summarize(relative_importance = mean(pct_importance)) |> \n  median_hdi(relative_importance)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'feature'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 7\n  feature   relative_importance .lower .upper .width .point .interval\n  <chr>                   <dbl>  <dbl>  <dbl>  <dbl> <chr>  <chr>    \n1 Flavor                  0.421  0.406  0.436   0.95 median hdi      \n2 Packaging               0.211  0.197  0.226   0.95 median hdi      \n3 Price                   0.367  0.350  0.385   0.95 median hdi      \n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npref_ranges_posterior |> \n  group_by(feature, .draw) |> \n  summarize(relative_importance = mean(pct_importance)) |> \n  ungroup() |> \n  mutate(feature = fct_reorder(feature, relative_importance)) |> \n  ggplot(aes(x = relative_importance, y = feature)) +\n  stat_ccdfinterval(aes(fill = feature)) +\n  # stat_ccdfinterval(aes(fill = feature, slab_alpha = after_stat(f)),\n  #   thickness = 1, fill_type = \"gradient\"\n  # ) +\n  expand_limits(x = 0) +\n  scale_x_continuous(labels = scales::label_percent()) +\n  guides(fill = \"none\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'feature'. You can override using the `.groups` argument.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](utils-preds-bayes_files/figure-html/unnamed-chunk-15-1.png){width=90%}\n:::\n:::\n\n\n## Predictions and transformations\n\n### Willingness-to-pay\n\n### Simulated choice shares\n\n\n## Market simulations?\n",
    "supporting": [
      "utils-preds-bayes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}